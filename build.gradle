plugins {
    id 'java'
    id 'war'
}

group 'org.zerock'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')

    //mariaDB
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.0.4'

    //hikari
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.3.1'

    //spring 관련 라이브러리
    //IOC/DI를 위한 스프링 핵심
    implementation group: 'org.springframework', name: 'spring-core', version: '5.3.27'
    //Spring Context의 기능을 상속하고 국제화 , 이벤트 전파,리소스 로딩 및 투명한 컨텍스트 생성에 대한 지원을 추구한다
    implementation group: 'org.springframework', name: 'spring-context', version: '5.3.27'
    //Spring mvc 에는 웹 애플리케이션을 위한 spring mvc 및 rest 웹서비스 구현이 포함되어 있습니다
    //도메인 모델 코드와 웹 양식을 분리하고 로딩 및
    implementation group: 'org.springframework', name: 'spring-webmvc', version: '5.3.27'
    //spring 트랜젝션
    implementation group: 'org.springframework', name: 'spring-tx', version: '5.3.19'
    //spring jdbc
    implementation group: 'org.springframework', name: 'spring-jdbc', version: '5.3.19'

    //mybaits 관련 라이브러리
    //mybatis
    implementation group: 'org.mybatis', name: 'mybatis', version: '3.5.9'
    //mybatis spring
    implementation group: 'org.mybatis', name: 'mybatis-spring', version: '2.0.7'

    //////////logr4j 관련 라이브러리
    //log4j core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
    //log4j api
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
    //log4j simple
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.2'

    //tag library jsp에서 for문과 if 문 사용 가능
    implementation group: 'javax.servlet', name: 'jstl', version: '1.2'

    //롬복
    compileOnly  'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    //번거로운 작업인 DTO -> VO , VO -> DTO 변환은 ModelMapper 라이브러리 이용
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.0.0'

    //dto 검증을 위한 validate 관련 라이브러리
    /*
        과거의 웹 개발은 자바스크립트를 이용해서 브라우저에서만 유효성 검사를 진행하는 방식이 많았지만, 모바일과 같이 다양한 환경에서 서버를 이용하는 현재에는
        브라우저에서 사용하는 프론트 쪽에서의 검증과 더불어 서버에서도 입력되는 값들을 검증하는 것이 일반적이다
        이러한 검증작업은 컨트롤러에서 진행되는데 스프링 mvc 의 경우 @valid 와 Bindingresult라는 존재를 이용해서 간단하게 처리할 수 가 있다. 버전6(버전7은 문제가 있음)

    * */
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.2.1.Final'

    //spring applicationContexts 의 일관된 로딩 캐싱을 제공하고 코드를 처리하여 테스트하는데 사용할 수 잇는 목 객체를 제공한다
    testImplementation group: 'org.springframework', name: 'spring-test', version: '5.3.27'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")

    //test에서도 롬복 어노테이션들을 사용할 수 있는 이유는 testCompileonly , testAnnotationProcessor 을 사용하기 때문이다
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'


    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}